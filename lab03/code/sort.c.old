/* Xavier Ruppen / REDS / HEIG-VD
 * HPC - 17.02.16
 * array_util.h
 *
 * Program entry. Must initialize and sort a list or an array,
 * depending on supplied command line arguments. For example :
 *
 * ./sort list 45000
 * ./sort array 33528
 */

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include "array_util.h"
#include "list_util.h"

#define PARAM_COUNT 3
#define PARAM_LIST "list"
#define PARAM_ARRAY "array"

enum sort_enum {
        SORT_ARRAY,
        SORT_LIST
};

int main(int argc, char **argv)
{
        enum sort_enum sort_type;
        uint64_t *array_uint64;
        struct list_element *head;
        size_t data_len,i;

        array_uint64 = NULL;
        /* arg parsing */
        if (argc != PARAM_COUNT) {
                fprintf(stderr, "usage: %s list|array data_len\n", argv[0]);
                return EXIT_FAILURE;
        }

        if (!strcmp(argv[1], PARAM_ARRAY))
                sort_type = SORT_ARRAY;

        else if (!strcmp(argv[1], PARAM_LIST))
                sort_type = SORT_LIST;

        else {
                fprintf(stderr, "wrong parameter \"%s\"\n", argv[1]);
                return EXIT_FAILURE;
        }

        data_len = atol(argv[2]);

        if(sort_type == SORT_ARRAY)
        {
                array_uint64 = array_init(data_len);
                printf("Unsorted array : \n");
                for(i = 0; i < data_len; i++)
                {
                       // printf("Elem : %ld\n",array_uint64[i]);
                }
                array_sort(array_uint64,data_len);
                printf("Sorted array : \n");
                for(i = 0; i < data_len; i++)
                {
                        // printf("Elem : %ld\n",array_uint64[i]);
                }
                array_clear(array_uint64);
        }
        else
        {
                head = list_init(data_len);
                struct list_element *temp = head;
                printf("Unsorted list : \n");
                while(temp != NULL)
                {
                        //printf("Elem :  %ld\n", temp->data_value);
                        temp = temp->next;
                }
                list_sort(head);
                printf("Sorted list : \n");
                struct list_element *temp2 = head;
                while(temp2 != NULL)
                {
                        //printf("Elem :  %ld\n", temp2->data_value);
                        temp2 = temp2->next;
                }

                list_clear(head);
        }

        return EXIT_SUCCESS;
}
